ANKUSH SAINI
DSA 150 DAYS CHALLENGE 450 QUESTIONS
 
 
 
 
 
•	DAY 16 :MATHS
1.SQRT(X)
class Solution {
public:
    int mySqrt(int x) {
        long long l=0,h=x;
        int result;
        while(l<=h)
        {
            long long mid=(l+h)/2;
            if(mid*mid==x)
            {
                return mid;
            }
            else if(mid*mid<x)
            {
                l=mid+1;
            }
            else
            {
                h=mid-1;
            }
            if(mid*mid<x)
            {
                result=mid;
            }
        }
        return result;
    }
};
 
 
2.PLUS ONE
NAÏVE SOLUTION:
Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 
 
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        vector<int>v;
        int i=digits.size()-1;
        int carry=1;
        while(i>=0)
        {
            v.push_back((digits[i]+carry)%10);
            carry=(digits[i]+carry)/10;
            i--;
        }
        if(carry==1)
        {
            v.push_back(1);
        }
        return vector<int>(v.rbegin(),v.rend());
    }
};
EFFICIENT SOLUTION :
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
       int i=digits.size()-1;
       while(i>=0)
       {
           if(digits[i]<9)
           {
               digits[i]++;
               return digits;
           }
           digits[i]=0;
           i--;
       }
       digits.insert(digits.begin(),1);
       return digits;
    }
};
 
 
 
 
 
 
 
3.ROMAN TO INTEGER
class Solution {
public:
    int romanToInt(string s) {
        int result=0,prev_result=0;
        int i=s.length()-1;
        while(i>=0)
        {
            int value=getValue(s[i]);
            if(prev_result>value)
            {
                result-=value;
            }
            else
            {
                result+=value;
            }
            prev_result=value;
            i--;
        }
        return result;
    }
    private:
    int getValue(char s)
    {
        if(s=='I')
        return 1;
        else if(s=='V')
        return 5;
        else if(s=='L')
        return 50;        
        else if(s=='X')
        return 10;
        else if(s=='C')
        return 100;
        else if(s=='D')
        return 500;
        else
        return 1000;
    }
};
 
4.HAPPY NUMBER
Happy number doesn’t contain 4 while non happy number always contain 4 after some iteration
Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:
Input: n = 2
Output: false
class Solution {
public:
    bool isHappy(int n) {
       int sum=0;
       while(sum!=4)
       {
           sum=0;
           while(n>0)
           {
               sum+=pow((n%10),2);
               n/=10;
           }
           n=sum;
           if(sum==1)
           return true;
       }
       return false;
    }
};
 
 
•	DAY 17:ARRAYS
1.Count Odd Number in an range Interval
Example 1:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].
Example 2:
Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].
class Solution {
public:
    int countOdds(int low, int high) {
        int count=0;
        if(low%2==0)
        low++;
        for(int i=low;i<=high;i+=2)
        {
            count++;
        }
        return count;
    }
};
2.Rectangle overlap
An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.
Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.
Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.
 
Example 1:
Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true
Example 2:
Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false
Example 3:
Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false
class Solution {
public:
    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {
        return (rec2[1]>=rec1[3]||rec1[1]>=rec2[3]||rec2[0]>=rec1[2]||rec1[0]>=rec2[2])?false:true;
    }
};
 
3.Add Digits
Example 1:
Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.
class Solution {
public:
    int addDigits(int num) {
        int sum=0;
        do
        {
            sum=0;
            while(num>0)
            {
                sum+=(num%10);
                num/=10;
            }
            num=sum;
        }while(sum>=10);
        return sum;
    }
};
 
 
4.Maximum Product of three numbers
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int max_product = nums[n - 1] * nums[n - 2] * nums[n - 3];
        int alternate_max_product = nums[0] * nums[1] * nums[n - 1];
        return max(max_product, alternate_max_product);
    }
};
 
5.Excel Sheet Column Number
Example 1:
Input: columnTitle = "A"
Output: 1
Example 2:
Input: columnTitle = "AB"
Output: 28
Example 3:
Input: columnTitle = "ZY"
Output: 701
 
class Solution {
public:
    int titleToNumber(string s) {
        int res=0;
        for(int i=0;i<s.size();i++)
        {
            int value=s[i]-'A'+1;
            res=res*26+value;
        }return res;
    }
};
 
•	DAY 18 : BITS 
1.Add Binary
Example 1:
Input: a = "11", b = "1"
Output: "100"
class Solution {
public:
    string addBinary(string a, string b) {
        string sum="";
       int i=a.size()-1,j=b.size()-1;
       int carry=0;
       int digit_sum=0;
       while(i>=0 || j>=0 || carry)
       {
           digit_sum=carry;
           if(i>=0)
           {
               digit_sum+=a[i--]-'0';
           }
           if(j>=0)
           {
               digit_sum+=b[j--]-'0';
           }
           sum=to_string(digit_sum%2)+sum;
           carry=digit_sum/2;
       }
       return sum;
    }
};
 
2.Counting Bits
Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:
Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 
NAÏVE APPROACH :
class Solution {
public:
    vector<int> countBits(int n) {
        // vector<int>v(n+1,0);
        // for(int i=1;i<=n;i++)
        // {
        //     int num=i;
        //     while(num>1)
        //     {
        //         if(num%2==1)
        //         v[i]++;
        //         num=num/2;
        //     }
        //     ++v[i];
        // }
        // return v;
    }
};
EFFICIENT APPROACH: O(n)
class Solution {
public:
    vector<int> countBits(int n) {
         vector<int>v(n+1);
        v[0]=0;
        for(int i=0;i<=n;i++)
        {
            if(i%2!=0)
            {
                v[i]=v[i/2]+1;
            }
            else
            {
                v[i]=v[i/2];
            }
        }
        return v;
    }
};
4.Single Number
Example 1:
Input: nums = [2,2,1]
Output: 1
Example 2:
Input: nums = [4,1,2,1,2]
Output: 4
Example 3:
Input: nums = [1]
Output: 1
class Solution {
public:
    int singleNumber(vector<int>& nums) {
       sort(nums.begin(),nums.end());
       for(int i=1;i<nums.size();i=i+2)
       {
           if(nums[i]!=nums[i-1])
               return nums[i-1];
       }
       return nums[nums.size()-1];
    }
};
5.Missing Number
NAÏVE APPROACH :
Example 1:
Input: nums = [3,0,1]
Output: 2
Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<=nums.size()-1;i++)
        {
            if(nums[i]!=i)
            {
                return i;
            }
        }
        return nums.size();
    }
};
EFFICIENT APPROACH:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int missing=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            missing^=i^nums[i];
        }
        return missing;
    }
};
ANOTHER SOLUTION :
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int sum=(n*(n+1))/2;
        for(int i=0;i<nums.size();i++)
        {
            sum=sum-nums[i];
        }
        return sum;
    }
};
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
6.Number of 1 bits
Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Method 1:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res=0;
        while(n>0)
        {
            if(n%2)
            res++;
            n/=2;
        }
        return res;
    }
};
 
Method 2: Bitwise Right Shift >>
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res=0;
        while(n!=0)
        {
            res+=n&1;
            n=n>>1;
        }
        return res;
    }
};
 
7.Hamming Distance
Example 1:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.
 
class Solution {
public:
    int hammingDistance(int x, int y) {
        int s=x^y;
        int res=0;
        while(s!=0)
        {
            res+=s&1;
            s=s>>1;
        }
        return res;
    }
};
 
8.Reverse Bits
Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
NAIVE APPRACH :
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
         uint32_t result1=0;
        for(int i=31;i>=0;i--)
        {
            uint32_t result2=n&1;
            result2<<=i;
            result1|=result2;
            n=n>>1;
        }
        return result1;
       
    }
};
EFFICIENT APPROACH :
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
       n=((n&0xffff0000)>>16)|((n&0x0000ffff)<<16);
       n=((n&0xff00ff00)>>8)|((n&0x00ff00ff)<<8);
       n=((n&0xf0f0f0f0)>>4)|((n&0x0f0f0f0f)<<4);
       n=((n&0xcccccccc)>>2)|((n&0x33333333)<<2);
       n=((n&0xaaaaaaaa)>>1)|((n&0x55555555)<<1);
       return n;
    }
};
 
 
 
 
 
 
 
 
 
•	DAY 19 : BS
1.Binary Search :
 
 
 
4.Valid Perfect Square :
Example 1:
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
Example 2:
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.
 
class Solution {
public:
    bool isPerfectSquare(int num) {
        if(num==1 || num==0)
        return true;
        long long l=0,h=num/2;
        while(l<=h)
        {
            long long m=(l+h)/2;
            if(m*m==num){return true;}
            else if(m*m>num){h=m-1;}
            else{l=m+1;}
        }
        return false;
    }
};
 
5.Kth Missing Positive Number :
Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        int n=arr[arr.size()-1];
        int i=0,j=0;
        while(i<n)
        {
            if((i+1)!=arr[j])
            {
                k--;
                if(k==0)
                return i+1;
            }
            else
            {
                j++;
            }
            i++;
        }
        return arr[arr.size()-1]+k;
    }
};
 
•	DAY 20 :Hashing
2.Ransom Note:
Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.
Each letter in magazine can only be used once in ransomNote.
 
Example 1:
Input: ransomNote = "a", magazine = "b"
Output: false
Example 2:
Input: ransomNote = "aa", magazine = "ab"
Output: false
Example 3:
Input: ransomNote = "aa", magazine = "aab"
Output: true
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        int character[26]={0};
        for(int i=0;i<magazine.size();i++)
        {
            character[magazine[i]-'a']++;
        }
        for(int i=0;i<ransomNote.size();i++)
        {
            if(character[ransomNote[i]-'a']==0)
            {
                return false;
            }
            else
            {
                character[ransomNote[i]-'a']--;
            }
        }
        return true;
    }
};
3.Contain Duplicate :
Using Sorting (Naïve Approach):
Example 1:
Input: nums = [1,2,3,1]
Output: true
Example 2:
Input: nums = [1,2,3,4]
Output: false
Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]==nums[i-1])
            return true;
        }
        return false;
    }
};
 HashTable (Efficient Approach):
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int>s;
        for(auto n:nums)
        {
            if(s.find(n)!=s.end())
            {
                return true;
            }
            else
            {
                s.insert(n);
            }
        }
        return false;
    }
};
5.Jewels and Stones :
Example 1:
Input: jewels = "aA", stones = "aAAbbbb"
Output: 3
Example 2:
Input: jewels = "z", stones = "ZZ"
Output: 0
class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        unordered_map<char,int>um;
        for(auto a:stones)
        {
            um[a]++;
        }
        int count=0;
        for(auto a:jewels)
        {
            if(um.find(a)!=um.end())
            {
                count+=um[a];
            }
        }
        return count;
    }
};
6.Unique Number of Occurrences :
Example 1:
Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:
Input: arr = [1,2]
Output: false
Example 3:
Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int,int>m;
        for(auto a:arr)
        {
            m[a]++;
        }
        unordered_set<int>s;
        for(auto a:m)
        {
            if(s.find(a.second)!=s.end())
            {
                return false;
            }
            else
            {
                s.insert(a.second);
            }
        }
        return true;
    }
};
 
•	DAY 21 :String
 
 
 
 
 
 
 
 
 
 
 
 
 
 
•	DAY 23 :Array
1.Fibbonacci Series :
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).
 
Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:
Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
class Solution {
public:
    int fib(int n) {
        // RECURSION
        // if(n==0)
        // {
        //     return 0;
        // }
        // if(n==1)
        // {
        //     return 1;
        // }
        // return fib(n-1)+fib(n-2);
        if(n==0 || n==1)
        {
            return n;
        }
        int first=0,second=1;
        while(n>1)
        {
            int temp=first;
            first=second;
            second=temp+second;
            n--;
        }
        return second;
    }
};
 
 2.Min Cost Climbing Stairs : 
 
 
 
3.Climbing Stairs :
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
 
Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
class Solution {
public:
    int climbStairs(int n) {
        // DIRECTLY CAN DO USING THE CONCEPT OF FIBBONACCI SERIES
        if(n==0||n==1)
        {
            return 1;
        }
        vector<int>v(n+1,0);
        v[0]=v[1]=1;
        for(int i=2;i<=n;i++)
        {
            v[i]=v[i-1]+v[i-2];
        }
        return v[n];
    }
};
 
 
 
 
 
 
 
 
 
 
5.Can Place Flower 
You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.
 
Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: false
 
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n){
        int size=flowerbed.size();
        for(int i=0;i<flowerbed.size() && n>0;i++)
        {
            if(flowerbed[i]==0 && (i==0 || flowerbed[i-1]==0) && (i==size-1 || flowerbed[i+1]==0))
            {
                flowerbed[i]=1;
                n--;
            }
        }
        return n<=0;
    }
};
 
•	DAY 24 :Array
1.	3sum :
 
 
 
 
 
 
 
 
 
 
 
3.Non Decreasing array :
Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.
We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).
 
Example 1:
Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:
Input: nums = [4,2,1]
Output: false
Explanation: You cannot get a non-decreasing array by modifying at most one element.
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int atmost=0;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]<nums[i-1])
            {
                if(atmost==1)
                {
                    return false;
                }
                if(i==1 || nums[i]>=nums[i-2])
                {
                    nums[i-1]=nums[i];
                }
                else
                {
                    nums[i]=nums[i-1];
                }
                atmost++;
            }
        }
        return atmost<=1;
    }
};
4. Product of Array Except Self :
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
 
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 
NAIVE APPROACH :
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int>preffix_product(n,1);
        vector<int>suffix_product(n,1);
        vector<int>answer(n,0);
        for(int i=1;i<nums.size();i++)
        {
            preffix_product[i]=preffix_product[i-1]*nums[i-1];
        }
        for(int i=n-2;i>=0;i--)
        {
            suffix_product[i]=suffix_product[i+1]*nums[i+1];
        }
        for(int i=0;i<n;i++)
        {
            answer[i]=preffix_product[i]*suffix_product[i];
        }
        return answer;
    }
};
EFFICIENT  APPROACH :
 
 
 
 
 
 
 
 
 
 
 
 
•	DAY 25: Array
      1.Merge Intervals :
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
 
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.empty())
        return intervals;
        sort(intervals.begin(),intervals.end());
        vector<vector<int>>result;
        // result.push_back({intervals[0][0],intervals[0][1]});
        // or
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++)
        {
            if(result.back()[1]>=intervals[i][0])
            {
                result.back()[1]=max(result.back()[1],intervals[i][1]);
            }
            else
            {
                result.push_back({intervals[i][0],intervals[i][1]});
            }
        }
        return result;
    }
};
•	DAY 34 : LIST 
     1.Sort List :
Given the head of a linked list, return the list after sorting it in ascending order.
 
Example 1:
 
Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:
 
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:
Input: head = []
Output: []
EFFICIENT  APPROACH :( Method -1)    Time : O(n logn) Space : O(logn)
 
class Solution {
public:
    ListNode* sortList(ListNode* head){
        ListNode*a=NULL,*b=NULL;
        if(head==NULL || head->next==NULL )
        {
            return head;
        }
        divideList(head,a,b);
        a=sortList(a);
        b=sortList(b);
 
        return merge(a,b);
    }
    ListNode*merge(ListNode*l1, ListNode*l2)
    {
        if(l1==NULL)
        {
            return l2;
        }
        if(l2==NULL)
        {
            return l1;
        }
        ListNode*result=NULL;
        if(l1->val<=l2->val)
        {
            result=l1;
            result->next=merge(l1->next,l2);
        }
        else
        {
            result=l2;
            result->next=merge(l1,l2->next);
        }
        return result;
    }
    void divideList(ListNode*head,ListNode* &a,ListNode* &b)
    {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        a=head;
        b=slow->next;
        slow->next=NULL;
    }
};
 
EFFICIENT  APPROACH : Time: O(N log N) 
Space : O(1) 
 
 
 
 
 
 2.Reorder List :
You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.
Example 1:
 
Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:
 
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 
class Solution {
public:
    void reorderList(ListNode* head) {
        if(!head || !head->next || !head->next->next)
        {
            return;
        }
        ListNode*slow=middle(head);
        ListNode*reversed=reverse(slow->next);
        slow->next=NULL;
        merge(head,reversed);
    }
 
    public:
    ListNode*middle(ListNode*head)
    {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode*reverse(ListNode*slow)
    {
        ListNode*prev=NULL;
        while(slow!=NULL)
        {
            ListNode*nextNode=slow->next;
            slow->next=prev;
            prev=slow;
            slow=nextNode;
        }
        return prev;
    }
    void merge(ListNode*l1,ListNode*l2)
    {
        while(l1 && l2)
        {
            ListNode*l1_next=l1->next;
            ListNode*l2_next=l2->next;
            l1->next=l2;
            l2->next=l1_next;
            l1=l1_next;
            l2=l2_next;
        }
    }
};
 
3.Rotate List :
Given the head of a linked list, rotate the list to the right by k places.
 
Example 1:
 
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:
 
Input: head = [0,1,2], k = 4
Output: [2,0,1]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k){
        if(head==NULL || head->next==NULL ||k==0)
        {
            return head;
        }
        ListNode*curr=head;
        int count=1;
        while(curr->next!=NULL)
        {
            count++;
            curr=curr->next;
        }
        k=k%count;
        if(k==0)
        {
            return head;
        }
        curr->next=head;
        int moves=count-k;
        ListNode*newHead;
        curr=head;
        for(int i=1;i<moves;i++)
        {
            curr=curr->next;
        }
        newHead=curr->next;
        curr->next=NULL;
        return newHead;
    }
};
•	DAY 31 : LIST
 1.Remove Nth node from the list 
Given the head of a linked list, remove the nth node from the end of the list and return its head.
 
Example 1:
 
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:
Input: head = [1], n = 1
Output: []
Example 3:
Input: head = [1,2], n = 1
Output: [1]
 
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head->next==NULL && n==1 || head==NULL)
        {
            return nullptr;
        }
        int count=length(head);
        if(count-n==0)
        {
            return head->next;
        }
        ListNode*fast=head;
        for(int i=1;i<count-n;i++)
        {
            fast=fast->next;
        }
        ListNode*temp=fast->next;
        if(temp!=NULL)
        {
            fast->next=temp->next;
            delete temp;
        }
        else
        {
            fast->next=NULL;
        }
        return head;
    }
    int length(ListNode*fast)
    {
        int count=0;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            fast=fast->next->next;
            count+=2;
        }
        if(fast->next==NULL)
        {
            count+=1;
        }
        else
        {
            count+=2;
        }
        return count;
    }
};
 
2.Delete Node in a Linked List:
There is a singly-linked list head and we want to delete a node node in it.
You are given the node to be deleted node. You will not be given access to the first node of head.
All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.
Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:
•	The value of the given node should not exist in the linked list.
•	The number of nodes in the linked list should decrease by one.
•	All the values before node should be in the same order.
•	All the values after node should be in the same order.
Custom testing:
•	For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.
•	We will build the linked list and pass the node to your function.
•	The output will be the entire list after calling your function.
 
Example 1:
 
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.
Example 2:
 
Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode*prev;
        while(node->next!=NULL)
        {
            prev=node;
            node->val=node->next->val;
            node=node->next;
        }
        prev->next=NULL;
    }
};
3.Remove Duplicates from sorted list II :
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.	
 
Example 1:
 
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:
 
Input: head = [1,1,1,2,3]
Output: [2,3]
 
 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*dummy=new ListNode(0);
        dummy->next=head;
        ListNode*curr=head;
        ListNode*prev=dummy;
        while(curr!=NULL && curr->next!=NULL)
        {
            if(curr->val==curr->next->val)
            {
                int duplicate = curr->val;
                while(curr!=NULL && curr->val==duplicate)
                {
                    ListNode*temp=curr;
                    curr=curr->next;
                    delete temp;
                }
                prev->next=curr;
            }
            else
            {
                prev=curr;
                curr=curr->next;
            }
        }
        return dummy->next;
    }
};
 
4. Next Greater Node in linked list : 
You are given the head of a linked list with n nodes.
For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.
Return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.
 
Example 1:
 
Input: head = [2,1,5]
Output: [5,5,0]
Example 2:
 
Input: head = [2,7,4,3,5]
Output: [7,0,5,5,0]
 
NAIVE  APPROACH :
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int>result;
        ListNode* curr=head;
        while(curr->next!=NULL)
        {
            ListNode*temp=curr->next;
            while(temp!=NULL && temp->val<=curr->val)
            {
                temp=temp->next;
            }
            if(temp==NULL)
            {
                result.push_back(0);
            }
            else
            {
                result.push_back(temp->val);
            }
            curr=curr->next;
        }
        result.push_back(0);
        return result;
    }
};
EFFICIENT  APPROACH :
 
 










•	DAY 32 : LIST
1.Add Two Number :
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 
Example 1:
 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1
 class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode*newNode=NULL,*head=NULL;
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry!=0)
        {
           int sum=(l1?l1->val:0)+(l2?l2->val:0)+carry;
           if(sum<10)
           {
               if(newNode==NULL)
               {
                   newNode=new ListNode(sum);
                   head=newNode;
               }
               else
               {
                   newNode->next=new ListNode(sum);
                   newNode=newNode->next;
               }
               carry=0;
           }
           else
           {
               int remainder=sum%10;
               carry=sum/10;
               if(newNode==NULL)
               {
                   newNode=new ListNode(remainder);
                   head=newNode;
               }
               else
               {
                   newNode->next=new ListNode(remainder);
                   newNode=newNode->next;
               }
           }
           if(l1)
           l1=l1->next;
           if(l2)
           l2=l2->next;
        }
        return head;
    }
};


2.Add Two Number II  :
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 
Example 1:
 
Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:
Input: l1 = [0], l2 = [0]
Output: [0]
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       l1=reverse(l1);
       l2=reverse(l2);
        int carry=0;
        ListNode*newNode=NULL;
        ListNode*head=NULL;
        while(l1!=NULL || l2!=NULL || carry!=0)
        {
            int sum=(l1?l1->val:0)+(l2?l2->val:0)+carry;
            if(sum<10)
            {
                if(newNode==NULL)
                {
                    newNode=new ListNode(sum);
                    head=newNode;
                }
                else
                {
                    newNode->next=new ListNode(sum);
                    newNode=newNode->next;
                }
                carry=0;
            }
            else
            {
                int remainder=sum%10;
                carry=sum/10;
                if(newNode==NULL)
                {
                    newNode=new ListNode(remainder);
                    head=newNode;
                }
                else
                {
                    newNode->next=new ListNode(remainder);
                    newNode=newNode->next;
                }
            }
            if(l1)
            l1=l1->next;
            if(l2)
            l2=l2->next;
        }
        head=reverse(head);
        return head;
    }
    ListNode*reverse(ListNode*head)
    {
        ListNode*prev=NULL;
        while(head!=NULL)
        {
            ListNode*nextNode=head->next;
            head->next=prev;
            prev=head;
            head=nextNode;
        }
        return prev;
    }
};
3.Copy List With Random Pointer :
Example 1:
 
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
Example 2:
 
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]
Example 3:
 
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
        return head;
        Node*curr=head;
        while(curr!=NULL)
        {
            Node*temp=new Node(curr->val);
            temp->next=curr->next;
            curr->next=temp;
            curr=temp->next;
        }
        curr=head;
        while(curr!=NULL)
        {
            if(curr->random!=NULL)
            {
                curr->next->random=curr->random->next;
            }
            curr=curr->next->next;
        }
        Node*copyHead=head->next;
        curr=head;
        while(curr!=NULL)
        {
            Node*temp=curr->next;
            curr->next=curr->next->next;
            if(temp->next!=NULL)
            {
                temp->next=temp->next->next;
            }
            curr=curr->next;
        }
        return copyHead;
    }
};

4.Reverse Linked List II : 
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
 
Example 1:
 
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*dummy=new ListNode(0);
          dummy->next=head;
          ListNode*curr=head;
          ListNode*prev=dummy;
          for(int i=1;i<left;i++)
          {
             prev=curr;
             curr=curr->next;
          }
          ListNode*point=curr;
          ListNode*reverse=NULL;
          for(int i=left;i<=right;i++)
          {
             ListNode*nextNode=curr->next;
             curr->next=reverse;
             reverse=curr;
             curr=nextNode;
          }
          point->next=curr;
          prev->next=reverse;
          return dummy->next;
    }
};
•	DAY 33 : LIST
1.Swap Nodes in Pairs : 
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
 
Example 1:
 
Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:
Input: head = []
Output: []
Example 3:
Input: head = [1]
Output: [1]
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*curr=head;
        ListNode*prev=NULL;
        ListNode*newHead=curr->next;
        while(curr!=NULL && curr->next!=nullptr)
        {
            ListNode*temp1=curr->next;
            curr->next=temp1->next;
            temp1->next=curr;

            if(prev!=NULL)
            {
                prev->next=temp1;
            }
            prev=curr;
            curr=curr->next;
        }
        return newHead;
    }
};




2.Odd Even Linked List :
Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
The first node is considered odd, and the second node is even, and so on.
Note that the relative order inside both the even and odd groups should remain as it was in the input.
You must solve the problem in O(1) extra space complexity and O(n) time complexity.
 
Example 1:
 
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
Example 2:
 
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode*odd=head;
        ListNode*even=head->next;
        ListNode*evenHead=even;
        while(even!=NULL && even->next!=NULL)
        {
            odd->next=even->next;
            odd=odd->next;
            even->next=odd->next;
            even=even->next;
        }
        odd->next=evenHead;
        return head;
    }
};

3.Partition List : 
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
 
Example 1:
 
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:
Input: head = [2,1], x = 2
Output: [1,2]
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode*minhead=NULL,*mintail=NULL;
        ListNode*maxhead=NULL,*maxtail=NULL;
        while(head!=NULL)
        {
            if(head->val<x)
            {
                if(minhead==NULL)
                {
                    minhead=mintail=head;
                }
                else
                {
                    mintail->next=head;
                    mintail=mintail->next;
                }
            }
            else
            {
                if(maxhead==NULL)
                {
                    maxhead=maxtail=head;
                }
                else
                {
                    maxtail->next=head;
                    maxtail=maxtail->next;
                }
            }
            head=head->next;
        }
        if(minhead==NULL)
        {
            return maxhead;
        }
        if(maxhead==NULL)
        {
            return minhead;
        }
        mintail->next=maxhead;
        maxtail->next=NULL;
        return minhead;
    }
};










•	DAY 35 : Stack 
 1.Reverse polish Notation :
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
2.Min stack :
 
•	DAY 36 : Stack 
1.	Next Greater Element :
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.
 
Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
(Method : 1)
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int>st;
        vector<int>result(nums.size());
        st.push(nums[nums.size()-1]);
        for(int i=nums.size()-2;i>=0;i--)
        {
            while(!st.empty() && st.top()<=nums[i])
            {
                st.pop();
            }
            st.push(nums[i]);
        }
        for(int i=nums.size()-1;i>=0;i--)
        {
            while(!st.empty() && st.top()<=nums[i])
            {
                st.pop();
            }
            int res=(st.empty())?-1:st.top();
            st.push(nums[i]);
            result[i]=res;
        }
        return result;
    }
};
 
(Method : 2) (more efficient)


















•	DAY 38 : Stack 
1.Asteroids Collision :
We are given an array asteroids of integers representing asteroids in a row.
For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.
Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.
 
Example 1:
Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:
Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:
Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids){
        vector<int>result;
        for(int i=0;i<asteroids.size();i++)
        {
            if(!result.empty() && (result.back()>0 && asteroids[i]<0))
            {
                int sum;
                while(!result.empty() && (result.back()>0 && asteroids[i]<0))
                {
                    sum=result.back()+asteroids[i];
                    if(sum==0)
                    {
                        result.pop_back();
                        break;
                    }
                    else if(sum<0)
                    {
                        result.pop_back();
                    }
                    else
                    {
                        break;
                    }
                }
                if(sum<0)
                {
                    result.push_back(asteroids[i]);
                }
            }
            else
            {
                result.push_back(asteroids[i]);
            }
        }
        return result;
    } 
};
2.Basic Calculator :













3.Remove K digits :
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.
 
Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
class Solution {
public:
    string removeKdigits(string num, int k) {
        if(num.size()==k)
        {
            return "0";
        }
        string s="";
        int i=0;
        while(i<num.size())
        {
            if(!s.empty() && k>0)
            {
                s.push_back(num[i]);
                while(!s.empty() && s.size()>=2 && k>0 && (s[s.size()-2]-'0' > s[s.size()-1]-'0'))
                {
                    char ch=s[s.size()-1];
                    s.pop_back();
                    s.pop_back();
                    s.push_back(ch);
                    k--;
                }
            }
            else
            {
                s.push_back(num[i]);
            }
            i++;
        }
        while(k!=0)
        {
            s.pop_back();
            k--;
        }
        if(s[0]-'0'==0)
        {
            int i=0;
            string s1="";
            while(s[i]-'0'==0)
            {
                i++;
            }
            s1=s.substr(i);
            return !s1.empty()?s1:"0";
        }
        else
        {
            return s;
        }
    }
};


•	DAY 39: Stack 
1.Remove All Adjacent Duplicate in String II:
You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.
 
Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
class Solution {
public:
    string removeDuplicates(string s, int k) {
        string s1;
        stack<int>st;
        for(auto ch:s)
        {
            if(!st.empty() && s1.back()==ch)
            {
                if(st.top()==k-1)
                {
                    int count=st.top();
                    while(count>0)
                    {
                        s1.pop_back();
                        count--;
                    }
                    st.pop();
                }
                else
                {
                    st.top()++;
                    s1.push_back(ch);
                }
            }
            else
            {
                st.push(1);
                s1.push_back(ch);
            }
        }
        return s1;
    }
};


